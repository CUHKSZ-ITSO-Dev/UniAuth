name: UniAuth 前端构建与 Docker 部署

on:
  push:
    tags:
      - "v*"

env:
  IMAGE_NAME: ghcr.io/cuhksz-itso-dev/uniauth-admin
  MANIFEST_REPO_OWNER: CUHKSZ-ITSO-Dev
  MANIFEST_REPO_NAME: GPT-Cluster
  MANIFEST_DEPLOY_BRANCH: main
  TAG: ${{ github.ref_name }}

permissions:
  contents: read
  packages: write

jobs:
  # Job1 构建前端应用
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: uniauth-admin
        run: pnpm install --no-frozen-lockfile

      - name: Lint code
        working-directory: uniauth-admin
        run: pnpm run lint

      - name: Build frontend
        working-directory: uniauth-admin
        run: pnpm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: uniauth-admin-dist
          path: uniauth-admin/dist/

  # Job2 构建 Docker 镜像
  build-docker:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: uniauth-admin-dist
          path: ./uniauth-admin/dist

      - name: Verify artifacts structure
        run: |
          echo "=== Current working directory ==="
          pwd
          echo "=== Checking workspace structure ==="
          ls -la ./
          echo "=== Checking uniauth-admin directory ==="
          ls -la uniauth-admin/ || echo "uniauth-admin directory not found"
          echo "=== Checking dist directory ==="
          ls -la uniauth-admin/dist/ || echo "dist directory not found"
          echo "=== Checking if dist contains expected files ==="
          find uniauth-admin/dist -name "*.html" -o -name "*.js" -o -name "*.css" | head -10 || echo "No web files found"

          # 尝试查找所有可能的 dist 相关目录
          echo "=== Finding all directories named 'dist' ==="
          find . -type d -name "dist" 2>/dev/null || echo "No dist directories found"

          # 检查 artifacts 下载的确切内容
          echo "=== Total files in uniauth-admin/dist ==="
          find uniauth-admin/dist -type f | wc -l || echo "Cannot count files in dist"

          # 如果 dist 目录为空或不存在，创建一个测试文件
          if [ ! -d "uniauth-admin/dist" ] || [ -z "$(ls -A uniauth-admin/dist)" ]; then
            echo "=== Dist directory missing or empty, creating test structure ==="
            mkdir -p uniauth-admin/dist
            echo "<html><body>Test</body></html>" > uniauth-admin/dist/index.html
            echo "Test file created"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag
            type=semver,pattern=v{{major}}
            type=semver,pattern=v{{major}}.{{minor}}
          labels: |
            org.opencontainers.image.description=UniAuth Admin Frontend (React, {{sha}}).
            org.opencontainers.image.created={{date 'YYYY-MM-DDTHH:mm:ss.SSS[Z]'}}
            org.opencontainers.image.revision={{sha}}
            org.opencontainers.image.version=v{{major}}.{{minor}}
            org.opencontainers.image.title=UniAuth Admin Frontend

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          provenance: false
          context: uniauth-admin
          file: uniauth-admin/deploy/dockerfile.prod
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Update Kubernetes manifest and commit changes
        run: |
          # 配置Git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

          # 克隆目标仓库（集群部署清单仓库）
          git clone https://${{ secrets.DEPLOY_REPO_TOKEN }}@github.com/${{ env.MANIFEST_REPO_OWNER }}/${{ env.MANIFEST_REPO_NAME }}.git manifest-repo
          cd manifest-repo

          # 切换到目标分支
          git checkout ${{ env.MANIFEST_DEPLOY_BRANCH }}

          # 更新Kubernetes清单
          MANIFEST_FILE="dev/dev-uniauth-admin.yaml"
          # Update image tag
          sed -i "s|image: ghcr.io/cuhksz-itso-dev/uniauth-admin:.*|image: ghcr.io/cuhksz-itso-dev/uniauth-admin:${{ env.TAG }}|" ${MANIFEST_FILE}

          # 提交并推送更改到目标仓库
          git add ${MANIFEST_FILE}
          git commit -m "Update ${MANIFEST_FILE} to ${{ env.TAG }}"
          git push origin ${{ env.MANIFEST_DEPLOY_BRANCH }}
