/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 */
export interface UniauthGfApiAuthV1GetAllActionsReq {
  [key: string]: unknown;
}

export interface UniauthGfApiAuthV1GetAllActionsRes {
  /** Actions */
  actions?: string[];
}

/**
 * 允许批量添加 Grouping Policies。
 */
export interface UniauthGfApiAuthV1AddGroupingReq {
  /** Groupings */
  groupings: string[][];
  /** 开启时，当规则已经存在时自动跳过，不返回错误；否则会返回错误，并回退所有操作 */
  skip?: boolean;
}

export interface UniauthGfApiAuthV1AddGroupingRes {
  [key: string]: unknown;
}

/**
 * 允许批量删除 Grouping Policies。原子性操作，当规则中有一条和数据库中的规则不匹配，立即回滚所有操作并返回错误。
 */
export interface UniauthGfApiAuthV1DeleteGroupingReq {
  /** Groupings */
  groupings: string[][];
}

export interface UniauthGfApiAuthV1DeleteGroupingRes {
  [key: string]: unknown;
}

/**
 * 编辑 Grouping Policies。需要提供老的 Grouping。
 */
export interface UniauthGfApiAuthV1EditGroupingReq {
  /** 旧的 Grouping */
  oldGrouping: string[];
  /** 新的 Grouping */
  newGrouping: string[];
}

export interface UniauthGfApiAuthV1EditGroupingRes {
  [key: string]: unknown;
}

/**
 * 根据给定的条件，返回 Grouping Policies 角色继承关系。留空的字段（传空 Array）将被忽略。
 */
export interface UniauthGfApiAuthV1FilterGroupingsReq {
  /** G1 列表 */
  g1?: string;
  /** G2 列表 */
  g2?: string;
  /** Rule */
  rule?: string;
  /** 分页。当前页码。 */
  page?: number;
  /** 分页。每页条数。 */
  pageSize?: number;
}

export interface UniauthGfApiAuthV1FilterGroupingsRes {
  groups?: string[][];
  /** 总条数。 */
  total?: number;
  /** 当前页码。 */
  page?: number;
  /** 每页条数。 */
  pageSize?: number;
  /** 总页数。 */
  totalPages?: number;
}

export interface UniauthGfApiAuthV1GetAllObjectsReq {
  [key: string]: unknown;
}

export interface UniauthGfApiAuthV1GetAllObjectsRes {
  /** Objects */
  objects?: string[];
}

export interface UniauthGfApiAuthV1AddPoliciesReq {
  /** Policies */
  policies: string[][];
  /** 开启时，当规则已经存在时自动跳过，不返回错误；否则会返回错误，并回退所有操作 */
  skip?: boolean;
}

export interface UniauthGfApiAuthV1AddPoliciesRes {
  [key: string]: unknown;
}

/**
 * 删除 Policies。原子性操作，当规则中有一条和数据库中的规则不匹配，立即回滚所有操作并返回错误。
 */
export interface UniauthGfApiAuthV1DeletePoliciesReq {
  /** Policies */
  policies: string[][];
}

export interface UniauthGfApiAuthV1DeletePoliciesRes {
  [key: string]: unknown;
}

/**
 * 编辑 Policy。需要提供老的 Policy。<br>注意顺序是 Sub Obj Act。
 */
export interface UniauthGfApiAuthV1EditPolicyReq {
  /** 旧的 Policy */
  oldPolicy: string[];
  /** 新的 Policy */
  newPolicy: string[];
}

export interface UniauthGfApiAuthV1EditPolicyRes {
  [key: string]: unknown;
}

/**
 * 模糊匹配。根据给定的条件，返回Policy。留空的字段（传空 Array）将被忽略。
 */
export interface UniauthGfApiAuthV1FilterPoliciesReq {
  /** Subject */
  sub?: string;
  /** Object */
  obj?: string;
  /** Action */
  act?: string;
  /** Effect */
  eft?: string;
  /** Rule */
  rule?: string;
  /** 分页。当前页码。 */
  page?: number;
  /** 分页。每页条数。 */
  pageSize?: number;
}

export interface UniauthGfApiAuthV1FilterPoliciesRes {
  policies?: string[][];
  /** 总条数。 */
  total?: number;
  /** 当前页码。 */
  page?: number;
  /** 每页条数。 */
  pageSize?: number;
  /** 总页数。 */
  totalPages?: number;
}

export interface UniauthGfApiAuthV1GetAllRolesReq {
  [key: string]: unknown;
}

export interface UniauthGfApiAuthV1GetAllRolesRes {
  /** Roles */
  roles?: string[];
}

export interface UniauthGfApiAuthV1GetAllSubjectsReq {
  [key: string]: unknown;
}

export interface UniauthGfApiAuthV1GetAllSubjectsRes {
  /** Subjects */
  subjects?: string[];
}

/**
 * 对话服务开启计费流程前的一站式权限检查，会进行以下检查：<br>1. 检查配额池是否存在；<br>2. 检查配额池是否被禁用；<br>3. 检查用户有没有权限使用这个配额池；<br>4. 检查配额池有没有权限使用这个 Svc 和 Product。
 */
export interface UniauthGfApiAuthV1ChatPreCheckOneStopReq {
  /** UPN */
  upn: string;
  /** 微服务 */
  svc: string;
  /** 产品 */
  product: string;
  /** 动作 */
  act: string;
  /** 配额池 */
  quotaPool: string;
}

export interface UniauthGfApiAuthV1ChatPreCheckOneStopRes {
  ok?: boolean;
}

/**
 * 动态获取指定配额池的可用模型。
 */
export interface UniauthGfApiAuthV1GetAvailableModelForQuotaPoolReq {
  /** QuotaPool */
  quotaPool: string;
}

export interface UniauthGfApiAuthV1GetAvailableModelForQuotaPoolRes {
  /** AvailableModel 列表 */
  availableModels?: string[];
}

/**
 * 给定sub obj act，查询是否有权限。
 */
export interface UniauthGfApiAuthV1CheckReq {
  /** 对象 */
  sub: string;
  /** 资源 */
  obj: string;
  /** 动作 */
  act: string;
}

export interface UniauthGfApiAuthV1CheckRes {
  allow?: boolean;
}

/**
 * 给定sub obj act，如果允许，返回使其允许的规则。
 */
export interface UniauthGfApiAuthV1CheckAndExplainReq {
  /** 对象 */
  sub: string;
  /** 资源 */
  obj: string;
  /** 动作 */
  act: string;
}

export interface UniauthGfApiAuthV1CheckAndExplainRes {
  allow?: boolean;
  /** 注意只有 allow = true 的时候才会返回 [3]string, 按顺序依次是 sub, obj, act。 */
  reason?: string[];
}

/**
 * 动态获取用户属于哪些配额池。
 */
export interface UniauthGfApiAuthV1GetAllQuotaPoolsReq {
  /** Upn */
  upn: string;
}

/**
 * PersonalMap。键为配额池名称，值为true时代表是自动配额池。
 */
export type UniauthGfApiAuthV1GetAllQuotaPoolsResPersonalMap = {
  [key: string]: boolean;
};

export interface UniauthGfApiAuthV1GetAllQuotaPoolsRes {
  /** QuotaPools 列表。 */
  quotaPools?: string[];
  /** PersonalMap。键为配额池名称，值为true时代表是自动配额池。 */
  personalMap?: UniauthGfApiAuthV1GetAllQuotaPoolsResPersonalMap;
}

/**
 * 动态获取指定配额池的用户。
 */
export interface UniauthGfApiAuthV1GetAllUsersForQuotaPoolReq {
  /** QuotaPool */
  quotaPool: string;
}

export interface UniauthGfApiAuthV1GetAllUsersForQuotaPoolRes {
  /** Users 列表 */
  users?: string[];
}

/**
 * UniAuth账号密码校验
 */
export interface UniauthGfApiAuthV1UniauthLoginReq {
  account: string;
  password: string;
}

export interface UniauthGfApiAuthV1UniauthLoginRes {
  ok?: boolean;
}

/**
 * 类型
 */
export type UniauthGfApiBillingV1ExportBillRecordReqType =
  (typeof UniauthGfApiBillingV1ExportBillRecordReqType)[keyof typeof UniauthGfApiBillingV1ExportBillRecordReqType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiBillingV1ExportBillRecordReqType = {
  qp: "qp",
  upn: "upn",
} as const;

/**
 * 账单返回时按照账单创建时间排序。默认正序 asc。
 */
export type UniauthGfApiBillingV1ExportBillRecordReqOrder =
  (typeof UniauthGfApiBillingV1ExportBillRecordReqOrder)[keyof typeof UniauthGfApiBillingV1ExportBillRecordReqOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiBillingV1ExportBillRecordReqOrder = {
  asc: "asc",
  desc: "desc",
} as const;

/**
 * 导出账单，根据一定的条件。有两个类型的账单，需要指定 type：<br>1. type = qp，返回每个配额池名下特定upns相关的账单；<br>2. type = upn，返回每个upn名下这些特定qps相关的账单。<br>数组传空时，则忽略对应的限制。
 */
export interface UniauthGfApiBillingV1ExportBillRecordReq {
  /** 类型 */
  type: UniauthGfApiBillingV1ExportBillRecordReqType;
  /** UPN列表 */
  upns?: string[];
  /** 配额池 */
  quotaPools?: string[];
  /** 服务 */
  svc?: string[];
  /** 产品 */
  product?: string[];
  /** 开始时间 */
  startTime: string;
  /** 结束时间 */
  endTime: string;
  /** 账单返回时按照账单创建时间排序。默认正序 asc。 */
  order: UniauthGfApiBillingV1ExportBillRecordReqOrder;
}

export interface UniauthGfApiBillingV1ExportBillRecordRes {
  [key: string]: unknown;
}

/**
 * 类型
 */
export type UniauthGfApiBillingV1GetBillRecordReqType =
  (typeof UniauthGfApiBillingV1GetBillRecordReqType)[keyof typeof UniauthGfApiBillingV1GetBillRecordReqType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiBillingV1GetBillRecordReqType = {
  qp: "qp",
  upn: "upn",
} as const;

/**
 * 账单返回时按照账单创建时间排序。默认倒序 desc。
 */
export type UniauthGfApiBillingV1GetBillRecordReqOrder =
  (typeof UniauthGfApiBillingV1GetBillRecordReqOrder)[keyof typeof UniauthGfApiBillingV1GetBillRecordReqOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiBillingV1GetBillRecordReqOrder = {
  asc: "asc",
  desc: "desc",
} as const;

/**
 * 查询账单，根据一定的条件。有两个类型的账单，需要指定 type：<br>1. type = qp，返回每个配额池名下特定upns相关的账单；<br>2. type = upn，返回每个upn名下这些特定qps相关的账单。<br>数组传空时，则忽略对应的限制。
 */
export interface UniauthGfApiBillingV1GetBillRecordReq {
  /** 类型 */
  type: UniauthGfApiBillingV1GetBillRecordReqType;
  /** UPN列表 */
  upns?: string[];
  /** 配额池 */
  quotaPools?: string[];
  /** 服务 */
  svc?: string[];
  /** 产品 */
  product?: string[];
  /** 开始时间 */
  startTime: string;
  /** 结束时间 */
  endTime: string;
  /** 账单返回时按照账单创建时间排序。默认倒序 desc。 */
  order: UniauthGfApiBillingV1GetBillRecordReqOrder;
}

export interface UniauthGfApiBillingV1GetBillRecordRes {
  records?: GithubComGogfGfV2EncodingGjsonJson;
}

export interface GithubComGogfGfV2EncodingGjsonJson {
  [key: string]: unknown;
}

/**
 * 刷新、检查配额池的余额。
 */
export interface UniauthGfApiBillingV1CheckBalanceReq {
  quotaPool: string;
}

export interface UniauthGfApiBillingV1CheckBalanceRes {
  ok: boolean;
}

/**
 * 检查Tokens使用情况
 */
export interface UniauthGfApiBillingV1CheckTokensUsageReq {
  upn: string;
  quotaPool: string;
  nDays: number;
}

export interface UniauthGfApiBillingV1CheckTokensUsageRes {
  tokensUsage: GithubComGogfGfV2EncodingGjsonJson;
}

/**
 * 获取指定配额池的所有服务和产品类型选项
 */
export interface UniauthGfApiBillingV1GetBillingOptionsReq {
  quotaPool: string;
}

export interface UniauthGfApiBillingV1GetBillingOptionsRes {
  /** 该配额池存在的所有服务类型 */
  services?: string[];
  /** 该配额池存在的所有产品类型 */
  products?: string[];
}

/**
 * 上传计费请求，完成配额池的扣费。
 */
export interface UniauthGfApiBillingV1BillingRecordReq {
  upn: string;
  service: string;
  product: string;
  source: string;
  cny_cost?: GithubComShopspringDecimalDecimal;
  usd_cost?: GithubComShopspringDecimalDecimal;
  detail?: GithubComGogfGfV2EncodingGjsonJson;
}

export interface GithubComShopspringDecimalDecimal {
  [key: string]: unknown;
}

export interface UniauthGfApiBillingV1BillingRecordRes {
  ok: boolean;
}

/**
 * 可以传入最近N天参数。
 */
export interface UniauthGfApiBillingV1NDaysProductUsageChartReq {
  /** N Days */
  N?: number;
}

export interface UniauthGfApiBillingV1NDaysProductUsageChartRes {
  chartData?: GithubComGogfGfV2EncodingGjsonJson;
}

/**
 * 可以传入最近N天参数。
 */
export interface UniauthGfApiBillingV1NDaysProductUsageGroupReq {
  /** N Days */
  N?: number;
}

export interface UniauthGfApiBillingV1NDaysProductUsageGroupRes {
  groupData?: GithubComGogfGfV2EncodingGjsonJson;
}

export interface UniauthGfApiConfigV1DeleteAutoQuotaPoolConfigReq {
  /** 规则名称（唯一） */
  ruleName: string;
}

export interface UniauthGfApiConfigV1DeleteAutoQuotaPoolConfigRes {
  /** 是否成功 */
  ok?: boolean;
}

export interface UniauthGfApiConfigV1GetAutoQuotaPoolConfigReq {
  [key: string]: unknown;
}

export interface UniauthGfApiConfigV1GetAutoQuotaPoolConfigRes {
  /** 自动配额池规则列表 */
  items?: UniauthGfApiConfigV1AutoQuotaPoolItem[];
}

export interface UniauthGfApiConfigV1AutoQuotaPoolItem {
  /** 自增主键 */
  id?: number;
  /** 规则名称，唯一 */
  ruleName?: string;
  /** 规则说明 */
  description?: string;
  /** 刷新周期 */
  cronCycle?: string;
  /** 定期配额 */
  regularQuota?: GithubComShopspringDecimalDecimal;
  /** 是否启用该配额池 */
  enabled?: boolean;
  /** 过滤条件组 */
  filterGroup?: GithubComGogfGfV2EncodingGjsonJson;
  /** UPN缓存列表 */
  upnsCache?: string[];
  /** 优先级，数值越小优先匹配 */
  priority?: number;
  /** 该规则上次评估时间 */
  lastEvaluatedAt?: string;
  /** 创建时间 */
  createdAt?: string;
  /** 更新时间 */
  updatedAt?: string;
  /** 默认Casbin规则 */
  defaultCasbinRules?: GithubComGogfGfV2EncodingGjsonJson;
}

export interface UniauthGfApiConfigV1AddAutoQuotaPoolConfigReq {
  /** 规则名称（唯一） */
  ruleName: string;
  /** 刷新周期，Cron 表达式 */
  cronCycle: string;
  /** 定期配额（每周期重置） */
  regularQuota: GithubComShopspringDecimalDecimal;
  /** 是否启用该规则 */
  enabled?: boolean;
  /** 默认Casbin规则配置 */
  defaultCasbinRules?: UniauthGfApiConfigV1DefaultCasbinRule[][];
  /** 过滤条件组，满足条件的用户将应用该规则 */
  filterGroup?: UniauthGfApiUserinfosV1FilterGroup;
  /** 规则说明 */
  description?: string;
  /** 优先级，数值越小优先匹配 */
  priority?: number;
}

export interface UniauthGfApiConfigV1DefaultCasbinRule {
  /** 资源对象 */
  obj?: string;
  /** 动作 */
  act?: string;
  /** 效果 */
  eft?: string;
}

/**
 * 逻辑关系: and(且), or(或)
 */
export type UniauthGfApiUserinfosV1FilterGroupLogic =
  (typeof UniauthGfApiUserinfosV1FilterGroupLogic)[keyof typeof UniauthGfApiUserinfosV1FilterGroupLogic];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiUserinfosV1FilterGroupLogic = {
  and: "and",
  or: "or",
} as const;

export interface UniauthGfApiUserinfosV1FilterGroup {
  /** 逻辑关系: and(且), or(或) */
  logic?: UniauthGfApiUserinfosV1FilterGroupLogic;
  /** 过滤条件列表 */
  conditions?: UniauthGfApiUserinfosV1FilterCondition[];
  /** 嵌套的条件组，支持复杂逻辑 */
  groups?: UniauthGfApiUserinfosV1FilterGroup[];
}

/**
 * 操作符: eq(等于), neq(不等于), gt(大于), gte(大于等于), lt(小于), lte(小于等于), like(模糊匹配), ilike(不区分大小写模糊匹配), in(包含), notin(不包含), contains(包含子串), notcontains(不包含子串), startswith(以...开头), endswith(以...结尾), isnull(为空), isnotnull(不为空)
 */
export type UniauthGfApiUserinfosV1FilterConditionOp =
  (typeof UniauthGfApiUserinfosV1FilterConditionOp)[keyof typeof UniauthGfApiUserinfosV1FilterConditionOp];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiUserinfosV1FilterConditionOp = {
  eq: "eq",
  neq: "neq",
  gt: "gt",
  gte: "gte",
  lt: "lt",
  lte: "lte",
  like: "like",
  ilike: "ilike",
  in: "in",
  notin: "notin",
  contains: "contains",
  notcontains: "notcontains",
  startswith: "startswith",
  endswith: "endswith",
  isnull: "isnull",
  isnotnull: "isnotnull",
} as const;

export interface UniauthGfApiUserinfosV1FilterCondition {
  /**
   * 字段名
   * @minLength 1
   * @maxLength 50
   */
  field: string;
  /** 操作符: eq(等于), neq(不等于), gt(大于), gte(大于等于), lt(小于), lte(小于等于), like(模糊匹配), ilike(不区分大小写模糊匹配), in(包含), notin(不包含), contains(包含子串), notcontains(不包含子串), startswith(以...开头), endswith(以...结尾), isnull(为空), isnotnull(不为空) */
  op: UniauthGfApiUserinfosV1FilterConditionOp;
  /** 条件值，根据操作符类型可以是字符串、数字、数组等 */
  value?: GithubComGogfGfV2ContainerGvarVar;
}

export interface GithubComGogfGfV2ContainerGvarVar {
  [key: string]: unknown;
}

export interface UniauthGfApiConfigV1AddAutoQuotaPoolConfigRes {
  /** 是否成功 */
  ok?: boolean;
}

export interface UniauthGfApiConfigV1EditAutoQuotaPoolConfigReq {
  /** 规则名称（唯一） */
  ruleName: string;
  /** 刷新周期，Cron 表达式 */
  cronCycle: string;
  /** 定期配额（每周期重置） */
  regularQuota: GithubComShopspringDecimalDecimal;
  /** 是否启用该配额池 */
  enabled?: boolean;
  /** 默认Casbin规则配置 */
  defaultCasbinRules?: UniauthGfApiConfigV1DefaultCasbinRule[][];
  /** 过滤条件组，满足条件的用户将应用该规则 */
  filterGroup?: UniauthGfApiUserinfosV1FilterGroup;
  /** 规则说明 */
  description?: string;
  /** 优先级，数值越小优先匹配 */
  priority?: number;
}

export interface UniauthGfApiConfigV1EditAutoQuotaPoolConfigRes {
  /** 是否成功 */
  ok?: boolean;
}

export interface UniauthGfApiConfigV1SyncAutoQuotaPoolUpnsCacheReq {
  /** 规则名称。不传或者传空数组会同步所有自动配额池的 UPNs Cache。 */
  ruleName?: string[];
}

export interface UniauthGfApiConfigV1SyncAutoQuotaPoolUpnsCacheRes {
  /** 是否成功 */
  ok: boolean;
  /** 批量刷新时，这个值是一共更改了多少个自动配额池的缓存；指定配额池刷新时，这个值是这个配额池有多少个用户 */
  updatedCount: number;
}

/**
 * 删除指定Key的i18n配置项
 */
export interface UniauthGfApiConfigV1DeleteI18ConfigReq {
  /** 翻译键 */
  key: string;
}

export interface UniauthGfApiConfigV1DeleteI18ConfigRes {
  /** 是否成功 */
  ok?: boolean;
}

/**
 * 添加一项i18n配置，包含多个语言的翻译
 */
export interface UniauthGfApiConfigV1AddI18nItemReq {
  /** 翻译键 */
  key: string;
  /** 中文翻译 */
  zh_cn?: string;
  /** 英文翻译 */
  en_us?: string;
  /** 描述 */
  description?: string;
}

export interface UniauthGfApiConfigV1AddI18nItemRes {
  /** 是否成功 */
  ok?: boolean;
}

/**
 * 编辑一项i18n配置的翻译
 */
export interface UniauthGfApiConfigV1EditI18nItemReq {
  /** 翻译键 */
  key: string;
  /** 中文翻译 */
  zh_cn?: string;
  /** 英文翻译 */
  en_us?: string;
  /** 描述 */
  description?: string;
}

export interface UniauthGfApiConfigV1EditI18nItemRes {
  /** 是否成功 */
  ok?: boolean;
}

/**
 * 根据关键词筛选i18n配置，支持排序和分页
 */
export interface UniauthGfApiConfigV1FilterI18nReq {
  /** 搜索关键词，对key、zh_cn、en_us、description字段进行模糊匹配 */
  keyword?: string;
  /** 排序条件，支持多字段排序 */
  sort?: UniauthGfApiConfigV1I18nSortCondition[];
  /** 分页参数，支持分页或查询全部 */
  pagination?: UniauthGfApiConfigV1I18nPaginationReq;
  /** 是否返回详细i18n信息，false时仅返回键列表 */
  verbose?: boolean;
}

/**
 * 排序方向: asc(升序), desc(降序)
 */
export type UniauthGfApiConfigV1I18nSortConditionOrder =
  (typeof UniauthGfApiConfigV1I18nSortConditionOrder)[keyof typeof UniauthGfApiConfigV1I18nSortConditionOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiConfigV1I18nSortConditionOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export interface UniauthGfApiConfigV1I18nSortCondition {
  /**
   * 排序字段
   * @minLength 1
   * @maxLength 50
   */
  field: string;
  /** 排序方向: asc(升序), desc(降序) */
  order?: UniauthGfApiConfigV1I18nSortConditionOrder;
}

export interface UniauthGfApiConfigV1I18nPaginationReq {
  /**
   * 页码，从1开始
   * @minimum 1
   */
  page?: number;
  /**
   * 每页条数，最大1000
   * @minimum 1
   * @maximum 1000
   */
  pageSize?: number;
}

export interface UniauthGfApiConfigV1FilterI18nRes {
  /** i18n键列表 */
  i18n_keys?: string[];
  /** 详细i18n信息（verbose=true时返回） */
  i18n_items?: UniauthGfApiConfigV1I18nItem[];
  /** 总记录数 */
  total?: number;
  /** 当前页码 */
  page?: number;
  /** 每页条数 */
  page_size?: number;
  /** 总页数 */
  total_pages?: number;
}

export interface UniauthGfApiConfigV1I18nItem {
  /** 翻译键 */
  key?: string;
  /** 中文翻译 */
  zh_cn?: string;
  /** 英文翻译 */
  en_us?: string;
  /** 描述 */
  description?: string;
  /** 创建时间 */
  created_at?: string;
  /** 更新时间 */
  updated_at?: string;
}

/**
 * 语言代码
 */
export type UniauthGfApiConfigV1GetI18nConfigReqLang =
  (typeof UniauthGfApiConfigV1GetI18nConfigReqLang)[keyof typeof UniauthGfApiConfigV1GetI18nConfigReqLang];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiConfigV1GetI18nConfigReqLang = {
  "zh-CN": "zh-CN",
  "en-US": "en-US",
} as const;

/**
 * 获取指定语言的所有翻译配置
 */
export interface UniauthGfApiConfigV1GetI18nConfigReq {
  /** 语言代码 */
  lang: UniauthGfApiConfigV1GetI18nConfigReqLang;
}

/**
 * 返回指定语言的所有翻译配置
 */
export interface UniauthGfApiConfigV1GetI18nConfigRes {
  /** 语言包键值对，支持嵌套结构 */
  langpack?: GithubComGogfGfV2EncodingGjsonJson;
}

/**
 * 获取系统支持的所有语言代码
 */
export interface UniauthGfApiConfigV1GetAllLangsReq {
  [key: string]: unknown;
}

export interface UniauthGfApiConfigV1GetAllLangsRes {
  /** 语言代码列表 */
  langs?: string[];
}

export interface UniauthGfApiConfigV1DeleteModelConfigReq {
  /** 模型名称（唯一） */
  approachName?: string;
}

export interface UniauthGfApiConfigV1DeleteModelConfigRes {
  /** 是否成功 */
  ok?: boolean;
}

/**
 * 客户端类型
 */
export type UniauthGfApiConfigV1AddModelConfigReqClientType =
  (typeof UniauthGfApiConfigV1AddModelConfigReqClientType)[keyof typeof UniauthGfApiConfigV1AddModelConfigReqClientType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiConfigV1AddModelConfigReqClientType = {
  AsyncAzureOpenAI: "AsyncAzureOpenAI",
  AsyncOpenAI: "AsyncOpenAI",
} as const;

export interface UniauthGfApiConfigV1AddModelConfigReq {
  /** 模型名称 */
  approachName: string;
  /** 定价配置 */
  pricing: GithubComGogfGfV2EncodingGjsonJson;
  /** 折扣 */
  discount?: GithubComShopspringDecimalDecimal;
  /** 客户端类型 */
  clientType: UniauthGfApiConfigV1AddModelConfigReqClientType;
  /** 客户端参数 */
  clientArgs?: GithubComGogfGfV2EncodingGjsonJson;
  /** 请求参数 */
  requestArgs?: GithubComGogfGfV2EncodingGjsonJson;
  /** 服务中间件标识 */
  servicewares?: string[];
}

export interface UniauthGfApiConfigV1AddModelConfigRes {
  /** 是否成功 */
  ok?: boolean;
}

/**
 * 客户端类型
 */
export type UniauthGfApiConfigV1EditModelConfigReqClientType =
  (typeof UniauthGfApiConfigV1EditModelConfigReqClientType)[keyof typeof UniauthGfApiConfigV1EditModelConfigReqClientType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiConfigV1EditModelConfigReqClientType = {
  AsyncAzureOpenAI: "AsyncAzureOpenAI",
  AsyncOpenAI: "AsyncOpenAI",
} as const;

/**
 * 编辑模型配置。
 */
export interface UniauthGfApiConfigV1EditModelConfigReq {
  /** 模型名称 */
  approachName: string;
  /** 定价配置 */
  pricing: GithubComGogfGfV2EncodingGjsonJson;
  /** 折扣 */
  discount?: GithubComShopspringDecimalDecimal;
  /** 客户端类型 */
  clientType: UniauthGfApiConfigV1EditModelConfigReqClientType;
  /** 客户端参数 */
  clientArgs?: GithubComGogfGfV2EncodingGjsonJson;
  /** 请求参数 */
  requestArgs?: GithubComGogfGfV2EncodingGjsonJson;
  /** 服务中间件标识 */
  servicewares?: string[];
}

export interface UniauthGfApiConfigV1EditModelConfigRes {
  /** 是否成功 */
  ok?: boolean;
}

export interface UniauthGfApiConfigV1GetModelConfigReq {
  [key: string]: unknown;
}

export interface UniauthGfApiConfigV1GetModelConfigRes {
  /** 模型配置列表 */
  items?: UniauthGfApiConfigV1ModelConfigItem[];
}

export interface UniauthGfApiConfigV1ModelConfigItem {
  /** 模型名称 */
  approachName?: string;
  /** 定价配置（JSON） */
  pricing?: GithubComGogfGfV2EncodingGjsonJson;
  /** 折扣 */
  discount?: GithubComShopspringDecimalDecimal;
  /** 客户端类型 */
  clientType?: string;
  /** 客户端参数（JSON） */
  clientArgs?: GithubComGogfGfV2EncodingGjsonJson;
  /** 请求参数（JSON） */
  requestArgs?: GithubComGogfGfV2EncodingGjsonJson;
  /** 服务项标识 */
  servicewares?: string[];
  /** 创建时间 */
  createdAt?: string;
  /** 更新时间 */
  updatedAt?: string;
}

export interface UniauthGfApiQuotaPoolV1DeleteQuotaPoolReq {
  quotaPoolName: string;
}

export interface UniauthGfApiQuotaPoolV1DeleteQuotaPoolRes {
  /** 是否成功 */
  ok?: boolean;
}

export interface UniauthGfApiQuotaPoolV1GetQuotaPoolReq {
  /** 配额池名称 */
  quotaPoolName: string;
}

export interface UniauthGfInternalModelEntityQuotapoolQuotaPool {
  /** 配额池名称 */
  quotaPoolName?: string;
  /** 刷新周期 */
  cronCycle?: string;
  /** 定期配额 */
  regularQuota?: GithubComShopspringDecimalDecimal;
  /** 剩余配额 */
  remainingQuota?: GithubComShopspringDecimalDecimal;
  /** 上次刷新时间 */
  lastResetAt?: string;
  /** 加油包 */
  extraQuota?: GithubComShopspringDecimalDecimal;
  /** 是否个人配额池 */
  personal?: boolean;
  /** 是否禁用 */
  disabled?: boolean;
  /** ITTools规则 */
  userinfosRules?: GithubComGogfGfV2EncodingGjsonJson;
  /** 创建时间 */
  createdAt?: string;
  /** 修改时间 */
  updatedAt?: string;
}

export interface UniauthGfApiQuotaPoolV1NewQuotaPoolReq {
  quotaPoolName: string;
  cronCycle: string;
  regularQuota: GithubComShopspringDecimalDecimal;
  personal: boolean;
  disabled?: boolean;
  extraQuota?: GithubComShopspringDecimalDecimal;
  userinfosRules?: GithubComGogfGfV2EncodingGjsonJson;
}

export interface UniauthGfApiQuotaPoolV1NewQuotaPoolRes {
  /** 是否成功 */
  ok?: boolean;
}

/**
 * 除了 quotaPoolName 字段必传之外，其他字段可以不传。不传的字段不会更新。
 */
export interface UniauthGfApiQuotaPoolV1EditQuotaPoolReq {
  quotaPoolName: string;
  cronCycle?: string;
  regularQuota?: GithubComShopspringDecimalDecimal;
  personal?: boolean;
  disabled?: boolean;
  extraQuota?: GithubComShopspringDecimalDecimal;
  userinfosRules?: GithubComGogfGfV2EncodingGjsonJson;
}

export interface UniauthGfApiQuotaPoolV1EditQuotaPoolRes {
  /** 是否成功 */
  ok?: boolean;
}

/**
 * 要修改的字段
 */
export type UniauthGfApiQuotaPoolV1BatchModifyQuotaPoolReqField =
  (typeof UniauthGfApiQuotaPoolV1BatchModifyQuotaPoolReqField)[keyof typeof UniauthGfApiQuotaPoolV1BatchModifyQuotaPoolReqField];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiQuotaPoolV1BatchModifyQuotaPoolReqField = {
  disabled: "disabled",
  personal: "personal",
} as const;

export interface UniauthGfApiQuotaPoolV1BatchModifyQuotaPoolReq {
  /** 筛选条件 */
  filter: UniauthGfApiQuotaPoolV1FilterGroup;
  /** 要修改的字段 */
  field: UniauthGfApiQuotaPoolV1BatchModifyQuotaPoolReqField;
  /** 新值 */
  value: GithubComGogfGfV2ContainerGvarVar;
  /** 预览模式，不执行修改，仅返回受影响的记录 */
  preview?: boolean;
}

/**
 * 逻辑关系: and(且), or(或)
 */
export type UniauthGfApiQuotaPoolV1FilterGroupLogic =
  (typeof UniauthGfApiQuotaPoolV1FilterGroupLogic)[keyof typeof UniauthGfApiQuotaPoolV1FilterGroupLogic];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiQuotaPoolV1FilterGroupLogic = {
  and: "and",
  or: "or",
} as const;

export interface UniauthGfApiQuotaPoolV1FilterGroup {
  /** 逻辑关系: and(且), or(或) */
  logic?: UniauthGfApiQuotaPoolV1FilterGroupLogic;
  /** 过滤条件列表 */
  conditions?: UniauthGfApiQuotaPoolV1FilterCondition[];
  /** 嵌套的条件组 */
  groups?: UniauthGfApiQuotaPoolV1FilterGroup[];
}

/**
 * 操作符
 */
export type UniauthGfApiQuotaPoolV1FilterConditionOp =
  (typeof UniauthGfApiQuotaPoolV1FilterConditionOp)[keyof typeof UniauthGfApiQuotaPoolV1FilterConditionOp];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiQuotaPoolV1FilterConditionOp = {
  eq: "eq",
  neq: "neq",
  gt: "gt",
  gte: "gte",
  lt: "lt",
  lte: "lte",
  like: "like",
  ilike: "ilike",
  in: "in",
  notin: "notin",
  contains: "contains",
  notcontains: "notcontains",
  startswith: "startswith",
  endswith: "endswith",
  isnull: "isnull",
  isnotnull: "isnotnull",
} as const;

export interface UniauthGfApiQuotaPoolV1FilterCondition {
  /**
   * 字段名
   * @minLength 1
   * @maxLength 50
   */
  field: string;
  /** 操作符 */
  op: UniauthGfApiQuotaPoolV1FilterConditionOp;
  /** 条件值 */
  value?: GithubComGogfGfV2ContainerGvarVar;
}

export interface UniauthGfApiQuotaPoolV1BatchModifyQuotaPoolRes {
  /** 是否成功 */
  ok?: boolean;
  /** 错误信息 */
  err?: string;
  /** 受影响的记录数 */
  affectedCount?: number;
  /** 受影响的配额池名称列表 */
  affectedPoolNames?: string[];
}

export interface UniauthGfApiQuotaPoolV1ResetBalanceReq {
  /** 配额池 */
  quotaPool: string;
}

export interface UniauthGfApiQuotaPoolV1ResetBalanceRes {
  /** 是否成功 */
  ok?: boolean;
  /** 错误信息 */
  err?: string;
}

export interface UniauthGfApiQuotaPoolV1EnsurePersonalQuotaPoolReq {
  upn: string;
}

export interface UniauthGfApiQuotaPoolV1EnsurePersonalQuotaPoolRes {
  /** 是否成功 */
  ok: boolean;
  /** 是否新建 */
  isNew: boolean;
}

/**
 * 根据过滤条件筛选配额池，支持复杂条件查询、排序和分页
 */
export interface UniauthGfApiQuotaPoolV1FilterQuotaPoolReq {
  /** 过滤条件，支持复杂的逻辑组合查询 */
  filter?: UniauthGfApiQuotaPoolV1FilterGroup;
  /** 排序条件，支持多字段排序 */
  sort?: UniauthGfApiQuotaPoolV1SortCondition[];
  /** 分页参数 */
  pagination?: UniauthGfApiQuotaPoolV1PaginationReq;
}

/**
 * 排序方向
 */
export type UniauthGfApiQuotaPoolV1SortConditionOrder =
  (typeof UniauthGfApiQuotaPoolV1SortConditionOrder)[keyof typeof UniauthGfApiQuotaPoolV1SortConditionOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiQuotaPoolV1SortConditionOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export interface UniauthGfApiQuotaPoolV1SortCondition {
  /**
   * 排序字段
   * @minLength 1
   * @maxLength 50
   */
  field: string;
  /** 排序方向 */
  order?: UniauthGfApiQuotaPoolV1SortConditionOrder;
}

export interface UniauthGfApiQuotaPoolV1PaginationReq {
  /**
   * 页码，从1开始
   * @minimum 1
   */
  page?: number;
  /**
   * 每页条数，最大1000
   * @minimum 1
   * @maximum 1000
   */
  pageSize?: number;
  /** 是否返回全部数据 */
  all?: boolean;
}

export interface UniauthGfApiQuotaPoolV1FilterQuotaPoolRes {
  /** 配额池列表 */
  items?: UniauthGfInternalModelEntityQuotapoolQuotaPool[];
  /** 总记录数 */
  total?: number;
  /** 当前页码 */
  page?: number;
  /** 每页条数 */
  pageSize?: number;
  /** 总页数 */
  totalPages?: number;
  /** 是否为全部数据查询 */
  isAll?: boolean;
}

/**
 * 给定配额池名称列表，根据配额池配置中的 UserInfos Rules，在 Casbin 中刷新组权限继承关系。'不传参数'则刷新所有配额池。如果传空数组，则没有任何操作！
 */
export interface UniauthGfApiQuotaPoolV1RefreshUsersOfQuotaPoolReq {
  qpNameList?: string[][];
}

export interface UniauthGfApiQuotaPoolV1RefreshUsersOfQuotaPoolRes {
  /** 是否成功 */
  ok: boolean;
}

/**
 * 根据UPN，返回用户的所有信息。
 */
export interface UniauthGfApiUserinfosV1GetOneReq {
  /** UPN */
  upn: string;
}

export interface UniauthGfInternalModelEntityUserinfosUserInfos {
  /** UPN - 唯一。用户名@cuhk.edu.cn 或 学号@link.cuhk.edu.cn。用户登录名。 */
  upn?: string;
  /** 邮箱 - 唯一。用户名@cuhk.edu.cn。 */
  email?: string;
  /** 显示名 - 显示名。 */
  displayName?: string;
  /** 在校状态 - 当前在校状态：Employed | Dimission | In-School | Graduation | Withdraw | Emeritus. （在岗 | 离职 | 在校 | 毕业 | 退学 | 荣誉退休。） */
  schoolStatus?: string;
  /** 身份 - 身份类型：Fulltime | CO | Student | Parttime。（全职 | 附属单位 | 学生 | 兼职。） */
  identityType?: string;
  /** 员工/学号 - 唯一。6位员工编号或9/10位学号。 */
  employeeId?: string;
  /** 全名 - 唯一。全名。 */
  name?: string;
  /** 标签 - 用户标签。 */
  tags?: string[];
  /** 部门 - 部门信息。 */
  department?: string;
  /** 职务 - 职务名称。 */
  title?: string;
  /** 办公室 - 办公地点。 */
  office?: string;
  /** 办公电话 - 办公室电话。 */
  officePhone?: string;
  /** 员工类型 - 员工类型。 */
  employeeType?: string;
  /** 经费类型/入学年份 - 教职员经费类型（uni/researchPro/Other）或学生4位入学年份 */
  fundingTypeOrAdmissionYear?: string;
  /** 学历大类 - Postgraduate/Undergraduate 研究生/本科生 */
  studentCategoryPrimary?: string;
  /** 学历细类 - Master/Ph.D./Undergraduate 硕士/博士/本科 */
  studentCategoryDetail?: string;
  /** 学生类别 - Local/Exchange/International/CUCDMP/HMT 本地/交换/国际/本部/港澳台 */
  studentNationalityType?: string;
  /** 书院 - 书院缩写（如SHAW） */
  residentialCollege?: string;
  /** 教职员角色 - Teaching/Admin/VisitingStudent/Alumni/Other 教学/行政/访问学生/校友/其他 */
  staffRole?: string;
  /** SAM账户名 - Windows账户名。 */
  samAccountName?: string;
  /** 邮件别名 - 邮箱别名。 */
  mailNickname?: string;
  /** 创建时间 - 记录创建时间。 */
  createdAt?: string;
  /** 更新时间 - 记录最后更新时间。 */
  updatedAt?: string;
}

/**
 * 根据过滤条件，返回用户的所有信息。支持复杂条件查询、排序和分页。
 */
export interface UniauthGfApiUserinfosV1FilterReq {
  /** 过滤条件，支持复杂的逻辑组合查询。注意：不传 Filter 会返回空值，不会进行查询。如果要返回所有信息，则至少需要传递 {}。若 Filter 里面的字段没有指定，则代表不做限制，忽略。 */
  filter?: UniauthGfApiUserinfosV1FilterGroup;
  /** 排序条件，支持多字段排序 */
  sort?: UniauthGfApiUserinfosV1SortCondition[];
  /** 分页参数，支持分页或查询全部 */
  pagination?: UniauthGfApiUserinfosV1PaginationReq;
  /** 是否返回详细用户信息，false时仅返回UPN列表 */
  verbose?: boolean;
}

/**
 * 排序方向: asc(升序), desc(降序)
 */
export type UniauthGfApiUserinfosV1SortConditionOrder =
  (typeof UniauthGfApiUserinfosV1SortConditionOrder)[keyof typeof UniauthGfApiUserinfosV1SortConditionOrder];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const UniauthGfApiUserinfosV1SortConditionOrder = {
  asc: "asc",
  desc: "desc",
} as const;

export interface UniauthGfApiUserinfosV1SortCondition {
  /**
   * 排序字段
   * @minLength 1
   * @maxLength 50
   */
  field: string;
  /** 排序方向: asc(升序), desc(降序) */
  order?: UniauthGfApiUserinfosV1SortConditionOrder;
}

export interface UniauthGfApiUserinfosV1PaginationReq {
  /**
   * 页码，从1开始
   * @minimum 1
   */
  page?: number;
  /**
   * 每页条数，最大1000
   * @minimum 1
   * @maximum 1000
   */
  pageSize?: number;
  /** 是否返回全部数据，true时忽略分页参数。 */
  all?: boolean;
}

export interface UniauthGfApiUserinfosV1FilterRes {
  /** 用户UPN列表 */
  userUpns?: string[];
  /** 详细用户信息（verbose=true时返回） */
  userInfos?: UniauthGfInternalModelEntityUserinfosUserInfos[];
  /** 总记录数 */
  total?: number;
  /** 当前页码 */
  page?: number;
  /** 每页条数 */
  pageSize?: number;
  /** 总页数 */
  totalPages?: number;
  /** 是否为全部数据查询 */
  isAll?: boolean;
}

export type GetAuthChatQuotaPoolsModelsParams = {
  /**
   * QuotaPool
   */
  quotaPool: string;
};

export type GetAuthQuotaPoolsAllParams = {
  /**
   * Upn
   */
  upn: string;
};

export type GetAuthQuotaPoolsUsersParams = {
  /**
   * QuotaPool
   */
  quotaPool: string;
};

export type GetBillingStatsChatUsageChartParams = {
  /**
   * N Days
   */
  N?: number;
};

export type GetBillingStatsChatUsageGroupParams = {
  /**
   * N Days
   */
  N?: number;
};

export type DeleteConfigAutoConfigParams = {
  /**
   * 规则名称（唯一）
   */
  ruleName: string;
};

export type DeleteConfigI18nParams = {
  /**
   * 翻译键
   */
  key: string;
};

export type GetConfigI18nLangParams = {
  /**
   * 语言代码
   */
  lang: GetConfigI18nLangLang;
};

export type GetConfigI18nLangLang =
  (typeof GetConfigI18nLangLang)[keyof typeof GetConfigI18nLangLang];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetConfigI18nLangLang = {
  "zh-CN": "zh-CN",
  "en-US": "en-US",
} as const;

export type DeleteConfigModelParams = {
  /**
   * 模型名称（唯一）
   */
  approachName?: string;
};

export type DeleteQuotaPoolParams = {
  quotaPoolName: string;
};

export type GetQuotaPoolParams = {
  /**
   * 配额池名称
   */
  quotaPoolName: string;
};

export type GetUserinfosParams = {
  /**
   * UPN
   */
  upn: string;
};
